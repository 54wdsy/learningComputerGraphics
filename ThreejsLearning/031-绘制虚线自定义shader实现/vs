// 片元
precision highp int;
#define HIGH_PRECISION
#define SHADER_NAME ShaderMaterial
#define GAMMA_FACTOR 2
#define DOUBLE_SIDED
uniform mat4 viewMatrix;
uniform vec3 cameraPosition;
uniform bool isOrthographic;
#define TONE_MAPPING
#ifndef saturate
#define saturate(a)clamp(a,0.,1.)
#endif
uniform float toneMappingExposure;
uniform float toneMappingWhitePoint;
vec3 LinearToneMapping(vec3 color){
  return toneMappingExposure*color;
}
vec3 ReinhardToneMapping(vec3 color){
  color*=toneMappingExposure;
  return saturate(color/(vec3(1.)+color));
}
#define Uncharted2Helper(x)max(((x*(.15*x+.10*.50)+.20*.02)/(x*(.15*x+.50)+.20*.30))-.02/.30,vec3(0.))
vec3 Uncharted2ToneMapping(vec3 color){
  color*=toneMappingExposure;
  return saturate(Uncharted2Helper(color)/Uncharted2Helper(vec3(toneMappingWhitePoint)));
}
vec3 OptimizedCineonToneMapping(vec3 color){
  color*=toneMappingExposure;
  color=max(vec3(0.),color-.004);
  return pow((color*(6.2*color+.5))/(color*(6.2*color+1.7)+.06),vec3(2.2));
}
vec3 ACESFilmicToneMapping(vec3 color){
  color*=toneMappingExposure;
  return saturate((color*(2.51*color+.03))/(color*(2.43*color+.59)+.14));
}
vec3 toneMapping(vec3 color){return LinearToneMapping(color);}

vec4 LinearToLinear(in vec4 value){
  return value;
}
vec4 GammaToLinear(in vec4 value,in float gammaFactor){
  return vec4(pow(value.rgb,vec3(gammaFactor)),value.a);
}
vec4 LinearToGamma(in vec4 value,in float gammaFactor){
  return vec4(pow(value.rgb,vec3(1./gammaFactor)),value.a);
}
vec4 sRGBToLinear(in vec4 value){
  return vec4(mix(pow(value.rgb*.9478672986+vec3(.0521327014),vec3(2.4)),value.rgb*.0773993808,vec3(lessThanEqual(value.rgb,vec3(.04045)))),value.a);
}
vec4 LinearTosRGB(in vec4 value){
  return vec4(mix(pow(value.rgb,vec3(.41666))*1.055-vec3(.055),value.rgb*12.92,vec3(lessThanEqual(value.rgb,vec3(.0031308)))),value.a);
}
vec4 RGBEToLinear(in vec4 value){
  return vec4(value.rgb*exp2(value.a*255.-128.),1.);
}
vec4 LinearToRGBE(in vec4 value){
  float maxComponent=max(max(value.r,value.g),value.b);
  float fExp=clamp(ceil(log2(maxComponent)),-128.,127.);
  return vec4(value.rgb/exp2(fExp),(fExp+128.)/255.);
}
vec4 RGBMToLinear(in vec4 value,in float maxRange){
  return vec4(value.rgb*value.a*maxRange,1.);
}
vec4 LinearToRGBM(in vec4 value,in float maxRange){
  float maxRGB=max(value.r,max(value.g,value.b));
  float M=clamp(maxRGB/maxRange,0.,1.);
  M=ceil(M*255.)/255.;
  return vec4(value.rgb/(M*maxRange),M);
}
vec4 RGBDToLinear(in vec4 value,in float maxRange){
  return vec4(value.rgb*((maxRange/255.)/value.a),1.);
}
vec4 LinearToRGBD(in vec4 value,in float maxRange){
  float maxRGB=max(value.r,max(value.g,value.b));
  float D=max(maxRange/maxRGB,1.);
  D=min(floor(D)/255.,1.);
  return vec4(value.rgb*(D*(255./maxRange)),D);
}
const mat3 cLogLuvM=mat3(.2209,.3390,.4184,.1138,.6780,.7319,.0102,.1130,.2969);
vec4 LinearToLogLuv(in vec4 value){
  vec3 Xp_Y_XYZp=cLogLuvM*value.rgb;
  Xp_Y_XYZp=max(Xp_Y_XYZp,vec3(1e-6,1e-6,1e-6));
  vec4 vResult;
  vResult.xy=Xp_Y_XYZp.xy/Xp_Y_XYZp.z;
  float Le=2.*log2(Xp_Y_XYZp.y)+127.;
  vResult.w=fract(Le);
  vResult.z=(Le-(floor(vResult.w*255.))/255.)/255.;
  return vResult;
}
const mat3 cLogLuvInverseM=mat3(6.0014,-2.7008,-1.7996,-1.3320,3.1029,-5.7721,.3008,-1.0882,5.6268);
vec4 LogLuvToLinear(in vec4 value){
  float Le=value.z*255.+value.w;
  vec3 Xp_Y_XYZp;
  Xp_Y_XYZp.y=exp2((Le-127.)/2.);
  Xp_Y_XYZp.z=Xp_Y_XYZp.y/value.y;
  Xp_Y_XYZp.x=value.x*Xp_Y_XYZp.z;
  vec3 vRGB=cLogLuvInverseM*Xp_Y_XYZp.rgb;
  return vec4(max(vRGB,0.),1.);
}
vec4 mapTexelToLinear(vec4 value){return LinearToLinear(value);}
vec4 matcapTexelToLinear(vec4 value){return LinearToLinear(value);}
vec4 envMapTexelToLinear(vec4 value){return LinearToLinear(value);}
vec4 emissiveMapTexelToLinear(vec4 value){return LinearToLinear(value);}
vec4 lightMapTexelToLinear(vec4 value){return LinearToLinear(value);}
vec4 linearToOutputTexel(vec4 value){return LinearToLinear(value);}

varying float lineU;
uniform float opacity;
uniform vec3 diffuse;
uniform float dashSteps;
uniform float dashSmooth;
uniform float dashDistance;

void main(){
  float lineUMod=mod(lineU,1./dashSteps)*dashSteps;
  float dash=smoothstep(dashDistance,dashDistance+dashSmooth,length(lineUMod-.5));
  gl_FragColor=vec4(diffuse*vec3(dash),opacity*dash);
}

// 顶点
attribute mat4 instanceMatrix;
#endif
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;
#ifdef USE_TANGENT
attribute vec4 tangent;
#endif
#ifdef USE_COLOR
attribute vec3 color;
#endif
#ifdef USE_MORPHTARGETS
attribute vec3 morphTarget0;
attribute vec3 morphTarget1;
attribute vec3 morphTarget2;
attribute vec3 morphTarget3;
#ifdef USE_MORPHNORMALS
attribute vec3 morphNormal0;
attribute vec3 morphNormal1;
attribute vec3 morphNormal2;
attribute vec3 morphNormal3;
#else
attribute vec3 morphTarget4;
attribute vec3 morphTarget5;
attribute vec3 morphTarget6;
attribute vec3 morphTarget7;
#endif
#endif
#ifdef USE_SKINNING
attribute vec4 skinIndex;
attribute vec4 skinWeight;
#endif

uniform float thickness;
attribute float lineMiter;
attribute vec2 lineNormal;
attribute float lineDistance;
varying float lineU;

void main(){
  lineU=lineDistance;
  vec3 pointPos=position.xyz+vec3(lineNormal*thickness/2.*lineMiter,0.);
  gl_Position=projectionMatrix*modelViewMatrix*vec4(pointPos,1.);
}
